import numpy as np
from pymoo.core.problem import Problem
from pymoo.algorithms.soo.nonconvex.ga import GA
from pymoo.problems import get_problem
from pymoo.optimize import minimize
from pymoo.operators.crossover.sbx import SBX
from pymoo.visualization.scatter import Scatter

class MyProblem(Problem):
    def __init__(self):
        super().__init__(n_var=6,
                         n_obj=1,
                         n_constr=22,
                         xl=np.array([0, 0, 0, 0, 0, 0]),
                         xu=np.array([1, 1, 1, 1, 1, 1]),
                         elementwise_evaluation=True)

    def _evaluate(self, x, out, *args, **kwargs):
        
        f = (1/22*((-0.444444 * x[0] - 0.454545 * x[1] - 0.033333333 * x[2])/(0.075 * x[3] + 0.024390244 * x[4] + 0.136597938 * x[5]))) + (1/22*((-0.666667 * x[0] -0.659091 * x[1] - 0.611111111 * x[2])/(0.225 * x[3] + 0.341463415 * x[4] + 0.136597938 * x[5]))) + (1/22*((-0.666667 * x[0] - 0.568182 * x[1] - 0.266666667 * x[2])/(0.15 * x[3] + 0.487804878 * x[4] + 0.18814433 * x[5]))) + (1/22*((-0.888889 * x[0] - 0.522727 * x[1] - 0.855555556 * x[2])/(0.375 * x[3] + 0.341463415 * x[4] + 0.322164948 * x[5]))) + (1/22*((-0.333333 * x[0] - 0.295455 * x[1] - 0.033333333 * x[2])/(0.125 * x[3] + 0.487804878 * x[4] + 0.164948454 * x[5]))) + (1/22*((-0.555556 * x[0] - 0.272727 * x[1] - 0.033333333 * x[2])/(1 * x[3] + 1 * x[4] + 0.201030928 * x[5]))) + (1/22*((-0.333333* x[0] - 0.477273 * x[1] - 0.011111 * x[2])/(0.125 * x[3] + 0.170731707 * x[4] + 0.159793814 * x[5]))) + (1/22*((-0.444444 * x[0] - 0.159091 * x[1] - 0.011111 * x[2])/(0.1 * x[3] + 0.414634146 * x[4] + 0.167525773 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.022727 * x[1] - 0.0222222 * x[2])/(0.425 * x[3] + 0.658536585 * x[4] + 0.471649485 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.022727 * x[1] - 0.177777778 * x[2])/(0.45 * x[3] + 0.536585366 * x[4] + 0.085051546 * x[5]))) + (1/22*((-1 * x[0] - 0.090909 * x[1] - 0.055555556 * x[2])/(0.45 * x[3] + 0.195121951 * x[4] + 1 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.181818 * x[1] - 0.011111 * x[2])/(0.025 * x[3] + 0.317073171 * x[4] + 0.056701031 * x[5]))) + (1/22*((-0.666667 * x[0] - 0.136364 * x[1] - 0.011111111 * x[2])/(0.15 * x[3] + 0.073170732 * x[4]+ 0.054123711 * x[5]))) + (1/22*((-0.333333 * x[0] - 1 * x[1] - 1 * x[2])/(0.025 * x[3] + 0.219512195 * x[4] + 0.198453608 * x[5]))) + (1/22*((-0.333333 * x[0] - 0.25 * x[1] - 0.011111 * x[2])/(0.05 * x[3] + 0.536585366 * x[4] + 0.546391753 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.068182 * x[1] - 0.088888889 * x[2])/(0.825 * x[3] + 0.975609756 * x[4] + 0.523195876 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.045455 * x[1] - 0.011111 * x[2])/(0.25 * x[3] + 0.365853659 * x[4] + 0.244845361 * x[5]))) + (1/22*((-0.222222* x[0] - 0.068182 * x[1] - 0.011111 * x[2])/(0.575 * x[3] + 0.02439 * x[4] + 0.072164948 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.090909 * x[1] - 0.011111 * x[2])/(0.575 * x[3] + 0.170731707 * x[4] + 0.231958763 * x[5]))) + (1/22*((-0.222222 * x[0] - 0.113636 * x[1] -0.011111 * x[2])/(0.225 * x[3] + 0.731707317 * x[4] + 0.224226804 * x[5]))) + (1/22*((-0.222222 * x[0] -0.022727 * x[1] - 0.011111 * x[2])/(0.025 * x[3] + 0.02439 * x[4] + 0.170103093 * x[5]))) +  (1/22*((-0.222222 * x[0] -0.022727 * x[1] - 0.011111 * x[2])/(0.575 * x[3] + 0.02439 * x[4] + 0.054124 * x[5])))           
        
        
        g1 = ((0.444444 * x[0] + 0.454545 * x[1] + 0.033333333 * x[2]) / (
              0.075 * x[3] + 0.024390244 * x[4] + 0.136597938 * x[5] )) - 1
        
        g2 = ((0.666667 * x[0] + 0.659091 * x[1] +0.611111111 * x[2]) / (
             0.225 * x[3] + 0.341463415 * x[4] + 0.136597938 * x[5])) - 1
        
        g3 = ((0.666667 * x[0] + 0.568182 * x[1] + 0.266666667 * x[2]) / (
               0.15 * x[3] + 0.487804878 * x[4] + 0.18814433 * x[5])) - 1
        
        g4 = ((0.888889 * x[0] + 0.522727 * x[1] + 0.855555556 * x[2]) / (
                0.375 * x[3] + 0.341463415 * x[4] + 0.322164948 * x[5])) - 1
        
        g5 = ((0.333333 * x[0] + 0.295455 * x[1] + 0.033333333 * x[2]) / (
               0.125 * x[3] + 0.487804878 * x[4] + 0.164948454 * x[5])) - 1
        
        g6 = ((0.555556 * x[0] + 0.272727 * x[1] + 0.033333333 * x[2]) / (
                1 * x[3] + 1 * x[4] + 0.201030928 * x[5])) - 1
        
        g7 = ((0.333333 * x[0] + 0.477273 * x[1] + 0.011111 * x[2]) / (
               0.125 * x[3] + 0.170731707 * x[4] + 0.159793814 * x[5])) - 1
        
        g8 = ((0.444444 * x[0] + 0.159091 * x[1] + 0.011111 * x[2]) / (
               0.1 * x[3] + 0.414634146 * x[4] + 0.167525773 * x[5])) - 1
        
        g9 = ((0.222222 * x[0] + 0.022727 * x[1] + 0.022222222 * x[2]) / (
                0.425 * x[3] + 0.658536585 * x[4] + 0.471649485 * x[5])) - 1
        
        g10 = ((0.222222 * x[0] + 0.022727 * x[1] + 0.177777778 * x[2]) / (
               0.45 * x[3] + 0.536585366 * x[4] + 0.085051546 * x[5])) - 1
        
        g11 = ((1 * x[0] + 0.090909 * x[1] + 0.055555556 * x[2]) / (
               0.45 * x[3] + 0.195121951 * x[4] + 1 * x[5])) - 1
        
        g12 = ((0.222222 * x[0] + 0.181818 * x[1] + 0.011111 * x[2]) / (
               0.025 * x[3] + 0.317073171 * x[4] + 0.056701031 * x[5])) - 1
        
        g13 = ((0.666667 * x[0] + 0.136364 * x[1] + 0.011111111 * x[2]) / (
                0.15 * x[3] + 0.073170732 * x[4] + 0.054123711 * x[5])) - 1
        
        g14 = ((0.333333 * x[ 0] + 1 * x[1] + 1 * x[2]) / (
               0.025 * x[3] + 0.219512195 * x[4] + 0.198453608 * x[5])) - 1
        
        g15 = ((0.333333 * x[0] + 0.25 * x[1] + 0.011111 * x[2]) / (
                0.05 * x[3] + 0.536585366 * x[4] + 0.546391753 * x[5])) - 1
        
        g16 = ((0.222222* x[0] + 0.068182 * x[1] + 0.088888889 * x[2]) / (
                0.825 * x[3] + 0.975609756 * x[4] + 0.523195876 * x[5])) - 1
        
        g17 = ((0.222222 * x[0] + 0.045455 * x[1] + 0.011111 * x[2]) / (
                0.25 * x[3] + 0.365853659 * x[4] + 0.244845361 * x[5])) - 1
        
        g18 = ((0.222222 * x[0] + 0.068182 * x[1] + 0.011111 * x[2]) / (
                0.575 * x[3] + 0.02439 * x[4] + 0.072164948 * x[5])) - 1
        
        g19 = ((0.222222 * x[0] + 0.090909 * x[1] + 0.011111 * x[2]) / (
                0.575 * x[3] + 0.170731707 * x[4] + 0.231958763 * x[5])) - 1
        g20 = ((0.222222 * x[0] + 0.113636 * x[1] + 0.011111 * x[2]) / (
                0.225 * x[3] + 0.731707317 * x[4] + 0.224226804 * x[5])) - 1
        
        g21 = ((0.222222 * x[0] + 0.022727 * x[1] + 0.011111 * x[2]) / (
                0.025 * x[3] + 0.731707317 * x[4] + 0.170103093 * x[5])) - 1
        
        g22 = ((0.222222 * x[0] + 0.022727 * x[1] + 0.011111 * x[2]) / (
                0.575 * x[3] + 0.731707317 * x[4] + 0.054124 * x[5])) - 1
        
        out["F"] = [f]



        out["G"] = [g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g14, g15, g15, g16, g17, g18, g19, g20, g21, g22]


problem = MyProblem()



# Set up the GA algorithm
algorithm = GA(pop_size=10, eliminate_duplicates=True)

# Run the optimization
res = minimize(problem, algorithm, seed=1, verbose=False)

# Print the best solution found
print("Best solution found:")
print("X =", res.X)
print("F =", res.F)

# Plot the Pareto front
plot = Scatter()
plot.add(res.F, color="red")
plot.show()
